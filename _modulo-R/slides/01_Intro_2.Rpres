<style>
.small-code pre code {
  font-size: 1.2em;
}
</style>

Introducción al R (Parte II)
========================================================
author: Kenneth Cabrera
date: `r format(Sys.Date(), format="%A, %d de %B de %Y")`


Clases de objetos
========================================================
El R tiene como clases de objetos básicos o "atómicos"

- character (alfanumérico).
- numeric (reales).
- integer (enteros).
- complex (complejos).
- logical (lógicos TRUE/FALSE).

Objetos
========================================================
El objeto más básico es un vector.

- Un vector sólo puede tener objetos de la misma clase.
- Una lista puede contener objetos de diferentes clases.
- Un vector vacío se crea con la función `vector()`

Números
========================================================
- Los números en R se tratan como objetos numéricos (reales
  de doble precisión).
- Si quieres especificar un entero deberá finalizarlo con `L`.
- *Números* especiales: `Inf`, representa el infinito.
- El valor `NA` es un valor faltante ("Not Available")
- El valor `NaN` es un valor no definido ("Not a Number").

Atributos
========================================================
Un objeto en R puede tener atributos como:
- nombres (`names`, `dimnames`).
- dimensiones (`dim`).
- clase (`class`).
- longitud (`length`).
- Otros metadatos y atributos particulares.

Se utiliza la función `attribute()` para inspeccionarlos.

Asignación
========================================================
El símbolo `<-` es el operador de asignación. También
se utiliza `->` para realizar la asignación de izquierda a
derecha.

```{r}
x <- 1
print(x)
```

```{r}
45 -> y
print(y)
```


Salida
========================================================
```{r}
x <- 1:20
x
```

El operador dos puntos (`:`) crea secuencias.

Vectores I
========================================================
```{r}
x <- c(0.5, 0.6)      ## numérico
class(x)
x <- c(TRUE, FALSE)   ## lógico
x <- c(TRUE, FALSE)   ## lógico
x <- c("a", "b", "c") ## alfanumérico, carácter, sarta.
```

Vectores II
========================================================
```{r}
x <- c(0.5, 0.6)      ## numérico
x <- 9:29             ## entero
x <- c(1+0i, 2+4i)    ## complejo
# Uso de la función vector().
x <- vector("numeric", length = 10)
x
```


Vectores III
========================================================
```{r}
x <- 1
class(x)
x <- 1L
class(x)
```

Mezcla de objetos (conversión implícita)
========================================================
```{r}
y <- c(1.7, "a")
y <- c(TRUE, 2)
y <- c("a", TRUE)
```

Conversión explícita I.
========================================================
```{r}
x <- 0:6
class(x)
as.numeric(x)
as.logical(x)
```

Conversión explícita II.
========================================================
```{r}
x <- 0:6
as.character(x)
as.complex(x)
```

Conversión explícita II.
========================================================
```{r}
x <- c("a", "b", "c")
as.numeric(x)
as.logical(x)
as.complex(x)
```


Matrices I
========================================================
class: small-code
```{r}
m <- matrix(nrow = 2, ncol = 3)
m
dim(m)
attributes(m)
```


Matrices II
========================================================
class: small-code
```{r}
m <- matrix(1:6, nrow = 2, ncol = 3)
m
```

Matrices III
========================================================
class: small-code
```{r}
m <- 1:10
m
dim(m) <- c(2, 5)
m
```

Concatenación por fila o por columna
========================================================
class: small-code
```{r}
x <- 1:3
y <- 10:12
cbind(x, y)
rbind(x, y)
```

Listas
========================================================
```{r}
x <- list(1, "a", TRUE, 1 + 4i)
x
```

Factores
========================================================
Los factores se usan para representar variables categóricas.
Pueden ser ordenados o no ordenados. Y se pueden asimilar
a un vector donde cada categoría tiene una etiqueta.

- Se usan en modelación como `lm()` y `glm()`.
- Ahorran espacio y codifican con etiquetas legibles variables
  categóricas.

Factores
========================================================
class: small-code
```{r}
x <- factor(c("si", "si", "no", "si", "no"))
levels(x)
unclass(x)
```

Factores
========================================================
class: small-code
```{r}
x <- factor(c("si", "si", "no", "si", "no"))

as.numeric(x)
x <- factor(x, levels = c("si","no"))
levels(x)
as.numeric(x)
```

Valores faltantes
========================================================

* `is.na()` Se usa para probar si los objetos son `NA`.
* `is.nan()` para los valores `NaN`.
* `NA` existen tantos numéricos `NA` como de sarta `<NA>`.
* Un valor `NaN` es `NA` pero no al contrario.

Valores faltantes I
========================================================
```{r}
x <- c(1, 2, NA, 10, 3, 0/0, 3/0, log(0))
is.na(x)
is.nan(x)
```



Bases de datos (data frames)
========================================================

* Son un tipo de lista, donde cada elemento de la lista
  tiene la misma longitud.
* Cada elemento de la lista es una columa y la longitud
  de cada elemento de la lista es el número de filas.
* A diferencia de las matrices los `data.frame` permiten
  tipos distintos para cada columna. En las matrices
  todos son de la misma clase.
* Los `data.frame` tienen atributos como `row.names`.
* Se crean mediante funciones como `read.table()` o
  `read.csv()`.
* Se pueden convertir a matrices con `data.matrix()`.


Bases de datos (data frames)
========================================================
class: small-code
```{r}
x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
x
nrow(x)
ncol(x)
```

Nombres de los objetos (vectores)
========================================================
class: small-code
```{r}
x <- 1:3
names(x)
names(x) <- c("foo", "bar", "norf")
x
names(x)
```


Nombres de los objetos (listas)
========================================================
```{r}
x <- list(a = 1, b = 2, c = 3)
x
```


Nombres de los objetos (matrices)
========================================================
```{r}
m <- matrix(1:4, nrow = 2, ncol = 2)
m
dimnames(m) <- list(c("a", "b"),c("c", "d"))
m
```


Subconjuntos en listas
========================================================
- `[` Siempre devuelve un objeto de la misma clase que el original.
- `[[` Es usado para extraer los elementos de una lista.
   Sólo para extraer un elmento de la lista. Lo que devuelve
   puede ser de distinto tipo al de la lista o el `data.frame`.
- `$` se usa para extraer elementos de una lista o `data.frame`.
   Semánticamente es similar a `[[`.

Ejemplo de subconjuntos I
========================================================
```{r}
x <- c("a", "b", "c", "c", "d", "a")
x[1]
x[2]
x[1:4]
```

Ejemplo de subconjuntos II
========================================================
```{r}
x <- c("a", "b", "c", "c", "d", "a")
x > "a"
x[x > "a"]
u <- x > "a"
x[u]
```


Subconjuntos (matrix) I
========================================================

```
x <- matrix(6:1, 2, 3)
x[1, 2]
x[2, 1]

x[1,]

x[,2]

```

Subconjuntos (matriz) II
========================================================
```
x <- matrix(6:1, 2, 3)
x[1, 2]
x[1, 2, drop = FALSE]

```

Subconjuntos (matriz)
========================================================
```
x <- matrix(6:1, 2, 3)
x[1, ]
x[1, , drop = FALSE]
```

Ejemplo subconjuntos (listas) I
========================================================
```{r}
x <- list(foo = 6:1, bar = 0.6)
x[1]
x[[1]]
```

Ejemplo subconjuntos (listas) II
========================================================
```{r}
x$bar
x[["bar"]]
x["bar"]
```

Ejemplo subconjuntos (listas) III
========================================================
class: small-code
```{r}
x <- list(foo = 6:1, bar = 0.6, baz = "hello")
x[c(1,3)]
```

Ejemplo subconjuntos (listas) IV
========================================================
class: small-code
```{r}
x <- list(foo = 6:1, bar = 0.6, baz = "hello")
nombre <- "foo"
x[[nombre]]
x$nombre
x$foo
```

Ejemplo subconjuntos (listas) V
========================================================
class: small-code
```{r}
x <- list(a = list(10, 12, 14), b = c(3.14, 2.81))
x[[c(1,3)]]
x[[1]][[3]]
x[[c(2,1)]]
```
