IntroducciÃ³n al R
========================================================
author: Kenneth Cabrera
date: MiÃ©rcoles 10 de septiembre de 2014

Breve historia
========================================================
- El R es un dialecto del lenguaje S.
- El S fue desarrollado por John Chambers.
- El S fue hecho incialmente para las bibliotecas en Frotran.
- En 1988 el sistema se reescribiÃ³ en C 
  y es bÃ¡sicamente lo que se tiene ahora
  (se denomina versiÃ³n 3 del lenguaje). El libro asociado
  es el "libro blanco" (white book) "Statistical Models in S".
- La versiÃ³n 4 se liberÃ³ en 1998. El libro asociado es
  es el "libro verde" (green book) "Programming with Data" y
  es la versiÃ³n sobre el cual R trabaja hoy en dÃ­a.

Notas histÃ³ricas del S
========================================================
* En 1993 los laboratorios Bell le otorgÃ³ a StatSci (ahora 
  la empresa se llama Insightful Corp.) una licencia para desarrollar
  y vender el S.
* En el 2004 Insightful le comprÃ³ el lenguaje S a Lucent por
  dos millones de dÃ³lares y es el dueÃ±o actual.
* Insightful construyÃ³ una plataforma GUI y actualmente el producto
  se denomina S-PLUS, y el "PLUS" es por esta plataforma.
* En el 2009 Insightful fue comprada por TIBCO por 25 millones de dÃ³lares.

Notas histÃ³ricas del R
========================================================
- 1991: Creado en Nueva Zelandia or Ross Ihaka y Robert Gentleman.
  Publica el artÃ­culo en 1996 en la revista JCGS (Journal of
  Computational and Graphical Statistics).
- 1993: Anuncio del R al pÃºblico.
- 1995: Martin MÃ¤chler convenciÃ³ a Ross y a Robert pasarlo a GNU.
- 1997: Se formÃ³ el grupo nÃºcleo del R (The R Core Group). 
  Administra el cÃ³digo fuente del R.
- 2000: VersiÃ³n 1.0.0, 2004: VersiÃ³n 2.0.0., 2013: VersiÃ³n 3.0.0.
- 10 de Julio de 2014: Ãšltima versiÃ³n oficial liberada a la fecha 
  3.1.1. "Sock it to Me" ("Give it to me")
  
CaracterÃ­sticas principales del R
========================================================
- Sintaxis similar al S.
- SemÃ¡ntica superficialmente simila al S.
- Ejecuta casi en toda plataforma.
- Desarrollo en constate actividad.
- Ãštil para trabajo interactivo.
- Es libre (gratis, y abierto).

Desventajas
========================================================
- Basado en tecnologÃ­a de hace 40 aÃ±os.
- No soporta muy bien grÃ¡ficas 3-D.
- La funcionalidad se base en la demanda del consumidor.
  Usted necesita hacer lo que otros no hacen.
- Los objetos de almacenan en memoria.
- No sirve para todo. 

Paquetes princiales
========================================================

* El sistema bÃ¡sico o base el el paquete **base**.
* El sistema bÃ¡sico incluye paquetes como el **utils**,
  **stats**, **datasets**, **graphics**, **parallel** y otros.
* Paquetes recomendados  **boot**, **class**, **cluster**
  **lattice**, **KernSmooth**, **nlme**, **nnet**, y otros.

Paquetes adicionales
========================================================
* Existen mÃ¡s de 4000 paquetes en el CRAN.
* Hay proyectos asociados como el Bioconductor (http://bioconductor.org).
* Algunos tienen desarrollos en su propia pÃ¡gina por lo
  tanto es mÃ¡s difÃ­cil de seguirles el rastro.
  

Clases de objetos
========================================================
El R tiene cinco clases de objetos bÃ¡sicos o "atÃ³micos"
- character (alfanumÃ©rico).
- numeric (reales).
- integer (enteros).
- complex (complejos).
- logical (lÃ³gicos TRUE/FALSE).

Objetos
========================================================
El objeto mÃ¡s bÃ¡sico es un vector.
- Un vector sÃ³lo puede tener objetos de la misma clase.
- Una lista puede contener objetos de diferentes clases.
- Un vector vacÃ­o se crea con la funciÃ³n `vector()`

NÃºmeros
========================================================
- Los nÃºmeros en R se tratan como objetos numÃ©ricos (reales
  de doble precisiÃ³n).
- Si quieres especificar un entero deberÃ¡ finalizarlo con `L`.
- *NÃºmeros* especiales: `Inf`, representa el infinito.
- El valor `NaN` es un valor no definio ("not a number").

Atributos
========================================================
Un objeto en R puede tener atributos como:
- nombres (`names`, `dimnames`).
- dimensiones (`dim`).
- clase (`class`).
- longitud (`length`).
- Otros metadatos y atributos particulares.
Se utiliza la funciÃ³n `attribute()` para obtenerlos.

AsignaciÃ³n
========================================================
El sÃ­mbolo `<-` es el operador de asignaciÃ³n.

TambiÃ©n se utiliza `->` para realizar la asignaciÃ³n de izquierda a 
derecha.

```
x <- 1
print(x)
```
```
45 -> y
print(y)
```


Salida
========================================================
```{r}
x <- 1:20
x
```

El operador ``:` crea secuencias.

Vectores
========================================================
```{r}
x <- c(0.5, 0.6)      ## numÃ©rico
class(x)
x <- c(TRUE, FALSE)   ## lÃ³gico
x <- c(TRUE, FALSE)   ## lÃ³gico
x <- c("a", "b", "c") ## alfanumÃ©rico, carÃ¡cter, sarta.
```

Vectores
========================================================
```{r}
x <- c(0.5, 0.6)      ## numÃ©rico
x <- 9:29             ## entero
x <- c(1+0i, 2+4i)    ## complejo
# Uso de la funciÃ³n vector().
x <- vector("numeric", length = 10)
x
```

Mezcla de objetos (conversiÃ³n implÃ­cita)
========================================================
```{r}
y <- c(1.7, "a")
y <- c(TRUE, 2)
y <- c("a", TRUE)
```

ConversiÃ³n explÃ­cita I.
========================================================
```{r}
x <- 0:6
class(x)
as.numeric(x)
as.logical(x)
```

ConversiÃ³n explÃ­cita II.
========================================================
```{r}
x <- 0:6
as.character(x)
as.complex(x)
```

ConversiÃ³n explÃ­cita II.
========================================================
```{r}
x <- c("a", "b", "c")
as.numeric(x)
as.logical(x)
as.complex(x)
```

Matrices I
========================================================
```{r}
m <- matrix(nrow = 2, ncol = 3)
m
dim(m)
attributes(m)
```

Matrices II
========================================================
```{r}
m <- matrix(1:6, nrow = 2, ncol = 3)
m
```

Matrices III
========================================================
```{r}
m <- 1:10
m
dim(m) <- c(2, 5)
m
```

ConcatenaciÃ³n por fila o por columna
========================================================
```{r}
x <- 1:3
y <- 10:12
cbind(x, y)
rbind(x, y)
```

Listas
========================================================
```{r}
x <- list(1, "a", TRUE, 1 + 4i)
x
```

Factores
========================================================
Los factores se usan para representar variables categÃ³ricas.
Pueden ser ordenados o no ordenados. Y se pueden asimilar
a un vector donde cada categorÃ­a tiene una etiqueta.

- Se usan en modelaciÃ³n como `lm()` y `glm()`.
- Ahorran espacio y codifican con etiquetas legibles variables
  categÃ³ricas.
  
Factores
========================================================

```{r}
x <- factor(c("si", "si", "no", "si", "no"))
table(x)
unclass(x)
```

Factores
========================================================

```{r}
x <- factor(c("si", "si", "no", "si", "no"),
            levels = c("si", "no"))
x
```

Valores faltantes
========================================================

* `is.na()` Se usa para probar si los objetos son `NA`.
* `is.nan()` para los valores `NaN`.
* `NA` existen tantos numÃ©ricos `NA` como de sarta `<NA>`.
* Un valor `NaN` es `NA` pero no al contrario.

Valores faltantes I
========================================================
```{r}
x <- c(1, 2, NA, 10, 3)
is.na(x)
is.nan(x)
```

Valores faltantes II
========================================================
```{r}
x <- c(1, 2, NaN, NA, 4)
is.na(x)
is.nan(x)
```

Bases de datos (data frames)
========================================================

* Son un tipo de lista, donde cada elemento de la lista
  tiene la misma longitud.
* Cada elemento de la lista es una columa y la longitud
  de cada elemento de la lista es el nÃºmero de filas.
* A diferencia de las matrices los `data.frame` permiten
  tipos distintos para cada columna. En las matrices
  todos son de la misma clase.
* Los `data.frame` tienen atributos como `row.names`.
* Se crean mediante funciones como `read.table()` o
  `read.csv()`.
* Se pueden convertir a matrices con `data.matrix()`.  


Bases de datos (data frames)
========================================================
```{r}
x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
x
nrow(x)
ncol(x)
```

Nombres de los objetos (vectores)
========================================================
```{r}
x <- 1:3
names(x)
names(x) <- c("foo", "bar", "norf")
x
names(x)
```


Nombres de los objetos (listas)
========================================================
```{r}
x <- list(a = 1, b = 2, c = 3)
x
```


Nombres de los objetos (matrices)
========================================================
```{r}
m <- matrix(1:4, nrow = 2, ncol = 2)
m
dimnames(m) <- list(c("a", "b"),c("c", "d"))
m
```


